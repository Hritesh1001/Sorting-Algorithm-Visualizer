def quick_sort(draw_info, ascending = True):
    lst = draw_info.lst
    l = 0
    h = len(lst) - 1
    size = h - l + 1
    stack = [0] * (size)
    top = -1
    
    top = top + 1
    stack[top] = l
    
    top = top + 1
    stack[top] = h
    
    while top >= 0:
        h = stack[top]
        top = top - 1
        l = stack[top]
        top = top - 1
        draw_lst(draw_info, {l : draw_info.RED, h : draw_info.GREEN}, True)
        yield True
        draw_lst(draw_info, {l : draw_info.RED, h : draw_info.GREEN}, True)
        yield True
        p = partition(draw_info, l, h, ascending)
        draw_lst(draw_info, {l : draw_info.RED, h : draw_info.GREEN}, True)
        yield True
        draw_lst(draw_info, {l : draw_info.RED, h : draw_info.GREEN}, True)
        yield True
        
        if p - 1 > l:
            top = top + 1
            stack[top] = l
            top = top + 1
            stack[top] = p - 1
            
        if p + 1 < h:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = h
            
#PARTITION Function is also a part of QUICK SORT
def partition(draw_info, l, h, ascending):
    lst = draw_info.lst
    i = (l - 1)
    x = lst[h]
    
    if ascending:
        for j in range(l, h):
            if lst[j] <= x:
                i = i + 1
                draw_lst(draw_info, {i : draw_info.RED, j : draw_info.GREEN}, True)
                time.sleep(0.02)
                lst[i], lst[j] = lst[j], lst[i]
        draw_lst(draw_info, {i + 1 : draw_info.RED, h : draw_info.GREEN}, True)
        time.sleep(0.02)
        lst[i + 1], lst[h] = lst[h], lst[i + 1]
        return (i + 1)
    else:
        for j in range(l, h):
            if lst[j] >= x:
                i = i + 1
                draw_lst(draw_info, {i : draw_info.RED, j : draw_info.GREEN}, True)
                time.sleep(0.02)
                lst[i], lst[j] = lst[j], lst[i]
        draw_lst(draw_info, {i + 1 : draw_info.RED, h : draw_info.GREEN}, True)
        time.sleep(0.02)
        lst[i + 1], lst[h] = lst[h], lst[i + 1]
        return (i + 1)